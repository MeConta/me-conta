# This is a basic workflow to help you get started with Actions

name: Deploy

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Install Dependencies
        uses: bahmutov/npm-install@v1
        with:
          working-directory: |
            backend
            frontend
      - name: BACKEND - Run Tests
        working-directory: backend
        run: npm run test:cov
      - name: BACKEND - Archive testes coverage
        uses: actions/upload-artifact@v2
        with:
          name: cov-files-backend
          path: ./backend/coverage/
      - name: BACKEND - Build
        working-directory: backend
        run: npm run build
      - name: BACKEND - Archive build
        uses: actions/upload-artifact@v2
        with:
          name: dist-files-backend
          path: ./backend/dist/
      - name: FRONTEND - Run tests
        working-directory: frontend
        run: npm run coverage
      - name: FRONTEND - Archive testes coverage
        uses: actions/upload-artifact@v2
        with:
          name: cov-files-frontend
          path: ./frontend/coverage/
      - name: FRONTEND - Build
        working-directory: frontend
        run: npm run build
      - name: FRONTEND - Archive artifact
        uses: actions/upload-artifact@v2
        with:
          name: dist-files-frontend
          path: ./frontend/.next/
  analysis:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: BACKEND - Download coverage results
        uses: actions/download-artifact@v2
        with:
          name: cov-files-backend
      - name: FRONTEND - Download coverage results
        uses: actions/download-artifact@v2
        with:
          name: cov-files-frontend
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  frontend:
    runs-on: ubuntu-latest
    needs:
      - analysis
    steps:
      - uses: actions/checkout@v2
        with: 
          submodules: recursive
      - name: Login no Heroku Container
        working-directory: frontend
        env: 
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: heroku container:login
      - name: Build docker image
        working-directory: frontend
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          docker build . -f Dockerfile.web -t frontend
          docker tag frontend registry.heroku.com/${{ secrets.HEROKU_FRONTEND_APP_NAME }}/web
      - name: Push docker image to Heroku
        working-directory: frontend
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: docker push registry.heroku.com/${{ secrets.HEROKU_FRONTEND_APP_NAME }}/web
      - name: Release to Heroku
        working-directory: frontend
        env: 
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: heroku container:release -a ${{ secrets.HEROKU_FRONTEND_APP_NAME }} web
  storybook:
      runs-on: ubuntu-latest
      needs:
        - analysis
      steps:
        - uses: actions/checkout@v2
          with: 
            submodules: recursive
        - name: Login no Heroku Container
          working-directory: frontend
          env: 
            HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          run: heroku container:login
        - name: Build Docker image
          working-directory: frontend
          env:
            HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          run: |
            docker build . -f Dockerfile.storybook -t storybook
            docker tag storybook registry.heroku.com/${{ secrets.HEROKU_STORYBOOK_APP_NAME }}/web
        - name: Push Docker image to Heroku
          working-directory: frontend
          env:
            HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          run: docker push registry.heroku.com/${{ secrets.HEROKU_STORYBOOK_APP_NAME }}/web
        - name: Release to Heroku
          working-directory: frontend
          env: 
            HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          run: heroku container:release -a ${{ secrets.HEROKU_STORYBOOK_APP_NAME }} web
  migration:
    runs-on: ubuntu-latest
    needs:
      - analysis
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Install dependencies
        uses: bahmutov/npm-install@v1
        with:
          working-directory: backend
      - name: BACKEND - Download build artifact
        uses: actions/download-artifact@v2
        with:
          name: dist-files-backend
      - name: Perform migrations
        working-directory: backend
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          NODE_ENV: production
        run: npm run typeorm:migration:run
  backend:
    runs-on: ubuntu-latest
    needs:
      - analysis
      - migration
    steps:
      - uses: actions/checkout@v2
        with: 
          submodules: recursive
      - name: Login no Heroku Container
        working-directory: backend
        env: 
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: heroku container:login
      - name: Push Container to Heroku
        working-directory: backend
        env: 
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: heroku container:push -a ${{ secrets.HEROKU_BACKEND_APP_NAME }} web
      - name: Release to Heroku
        working-directory: backend
        env: 
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: heroku container:release -a ${{ secrets.HEROKU_BACKEND_APP_NAME }} web
